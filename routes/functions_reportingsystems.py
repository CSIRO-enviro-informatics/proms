import cStringIO
import urllib
import uuid

from rdflib import Graph

import api_functions
import rulesets.reportingsystems as reportingsystem_ruleset
import settings
from database import sparqlqueries
from ldapi import LDAPI


class IncomingReportingSystem:
    def __init__(self, reportingsystem_data, reportingsystem_mimetype):
        self.reportingsystem_data = reportingsystem_data
        self.reportingsystem_mimetype = reportingsystem_mimetype
        self.reportingsystem_graph = None
        self.error_messages = None
        self.reportingsystem_uri = None

    def valid(self):
        """Validates an incoming ReportingSystem using direct tests (can it be parsed?) and appropriate RuleSets"""
        # try to parse the Reportingsystem data
        try:
            self.reportingsystem_graph = Graph().parse(
                cStringIO.StringIO(self.reportingsystem_data),
                format=[item[1] for item in LDAPI.MIMETYPES_PARSERS if item[0] == self.reportingsystem_mimetype][0]
            )
        except Exception, e:
            self.error_messages = ['The serialised data cannot be parsed. Is it valid RDF?',
                                   'Parser says: ' + e.message]
            return False

        # RuleSet
        conformant_report = reportingsystem_ruleset.ReportingSytems(self.reportingsystem_graph)

        if not conformant_report.passed:
            self.error_messages = conformant_report.fail_reasons
            return False

        # if the Report has been parsed, we have found the Report type and it's passed it's relevant RuleSet, it's valid
        return True

    def determine_reportingsystem_uri(self):
        """Determines the URI for this ReportingSystem"""
        # if this ReportingSystem has a placeholder URI, find it and replace it with one generated by PROMS Server
        q = '''
            SELECT ?uri
            WHERE {
                ?uri a <http://promsns.org/def/proms#ReportingSystem> .
                FILTER regex(str(?uri), "placeholder")
            }
        '''
        uri = None
        for r in self.reportingsystem_graph.query(q):
            uri = r['uri']

        if uri is not None:
            self._generate_new_uri(uri)
        else:
            # since it has an existing URI, not a placeholder one, use the existing one
            q = '''
                SELECT ?uri
                WHERE {
                    ?uri a <http://promsns.org/def/proms#ReportingSystem> .
                }
            '''
            for r in self.reportingsystem_graph.query(q):
                self.reportingsystem_uri = r['uri']

        return True

    def _generate_new_uri(self, old_uri):
        # ask PROMS Server for a new RS URI
        new_uri = settings.REPORTINGSYSTEM_BASE_URI + str(uuid.uuid4())
        self.reportingsystem_uri = new_uri
        # add that new URI to the in-memory graph
        api_functions.replace_uri(self.reportingsystem_graph, old_uri, new_uri)

    def stored(self):
        """ Add a ReportingSystem to PROMS"""
        try:
            sparqlqueries.insert(self.reportingsystem_graph, self.reportingsystem_uri)
            return True
        except Exception as e:
            self.error_messages = ['Could not connect to the provenance database']
            return False


def get_reports_for_rs_query(reportingsystem_uri):
    """ Construct a query to get all Reports for the specified ReportingSystem
    """
    query = '''
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX proms: <http://promsns.org/def/proms#>
SELECT  *
WHERE {
    GRAPH ?g {
        { ?r a proms:Report }
        UNION
        { ?r a proms:BasicReport }
        UNION
        { ?r a proms:ExternalReport }
        UNION
        { ?r a proms:InternalReport }
        ?r proms:reportingSystem <''' + reportingsystem_uri + '''> .
        ?r rdfs:label ?t .
        ?r proms:nativeId ?job .
        ?r proms:endingActivity ?sat .
        ?sat prov:endedAtTime ?eat .
    }
}
ORDER BY DESC(?eat)
    '''
    return query


# TODO: get ordering by Report --> Activity --> startedAtTime
def get_reports_for_rs(reportingsystem_uri):
    """ Get all Reports for a ReportingSystem
    """
    query = get_reports_for_rs_query(reportingsystem_uri)
    return sparqlqueries.query(query)


def get_reportingsystem_details_svg(reportingsystem_dict):
    """ Construct the SVG code for the ReportingSystem
    """
    rLabel = reportingsystem_dict.get('t', 'Untitled')
    script = '''
        var rLabel = "''' + rLabel + '''";
        var reportingSystem = addReportingSystem(35, 5, rLabel, "", "");
    '''
    return [True, script]


def get_reportingsystem_reports_svg(reportingsystem_uri):
    """ Construct SVG code for all Reports contained in a ReportingSystem
    """
    reports = get_reports_for_rs(reportingsystem_uri)
    if reports and reports['results']['bindings']:
        if len(reports['results']['bindings']) > 0:
            r1uri_encoded = urllib.quote(reports['results']['bindings'][0]['r']['value'])
            r1title = reports['results']['bindings'][0]['t']['value']
            r1jobId = reports['results']['bindings'][0]['job']['value']
            y_top = 5
            x_pos = 350
            reports_script = '''
                var reports = [];
                var report0 = addReport(''' + str(x_pos) + ''', ''' + str(y_top) + ''', "''' + r1title + '''", "''' + settings.WEB_SUBFOLDER + "/id/report/?uri=" + r1uri_encoded + '''", "''' + r1jobId + '''");
                reports.push(report0);
            '''
            if len(reports['results']['bindings']) > 1:
                reports = reports['results']['bindings'][1:]
                y_gap = 15
                report_height = 100
                i = 1
                for report in reports:
                    y_offset = y_top + (i*report_height) + (i*y_gap)
                    if i == 3:
                        query = get_reports_for_rs_query(reportingsystem_uri)
                        query_encoded = urllib.quote(query)
                        reports_script += '''
                            var report = addReport(''' + str(x_pos) + ''', ''' + str(y_offset) + ''', "Multiple Reports, click to search", "''' + settings.WEB_SUBFOLDER + "/function/sparql/?query=" + query_encoded + '''");
                            reports.push(report);
                        '''
                        break
                    uri = report['r']['value']
                    uri_encoded = urllib.quote(uri);
                    title = report['t']['value']
                    jobId = report['job']['value']
                    reports_script += '''
                        var report = addReport(''' + str(x_pos) + ''', ''' + str(y_offset) + ''', "''' + title + '''", "''' + settings.WEB_SUBFOLDER + "/id/report/?uri=" + uri_encoded + '''", "''' + jobId + '''");
                        reports.push(report);
                    '''
                    i += 1
            reports_script += '''
                addConnectedLinks(reportingSystem, reports, "proms:reportingSystem");
            '''
        else:
            #no reports
            reports_script = ''
    else:
        #we have a fault
        reports_script = '''
            //var reportUsedFaultText = addReport(550, 200, "There is a fault with retrieving Reports that may have used this ReportingSystem", "");
            var reportUsedFaultText = addReport(550, 0, "No Reports for this RS", "");
        '''
    return reports_script


def put_reportingsystem(reportingsystem_in_turtle):
    """ Add a ReportingSystem to PROMS
    """
    try:
        # try to make a graph of the input text
        g = Graph().parse(cStringIO.StringIO(reportingsystem_in_turtle), format='turtle')

        # validate
        v = ReportingSytems(g)
        # fail if RuleSet validation unsuccessful
        if not v.passed:
            return [False, v.fail_reasons]

        # replace the document's placeholder URI with one generated by this PROMS instance
        g = replace_placeholder_uuids(g)

        # get the ReportingSystem URI
        result = g.query('''
            PREFIX proms: <http://promsns.org/def/proms#>
            SELECT ?rs WHERE {
                ?rs a proms:ReportingSystem .
            }
        ''')
        for row in result:
            rs_uri = row[0]

        # insert into triplestore's default graph
        insert = sparqlqueries.insert(g)
        if insert[0]:
            return [insert[0], [rs_uri]]
        else:
            return insert
    except Exception as e:
        return [False, ['Could not parse input: ' + str(e)]]
