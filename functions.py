import settings
import re
import json
import pyproms
import cStringIO
from rdflib import Graph
import requests
from rulesets import proms


def get_proms_html_header():
    html = requests.get('http://scikey.org/theme/template-header.inc').text

    nav = open(settings.HOME_DIR + settings.STATIC_DIR + 'nav.html', 'r').read()
    html = html.replace('<?php include $nav ?>', nav)
    html = re.sub(r'<title>(.*)</title>', '<title>PROMS: Provenance Management System</title>', html)
    style = '''
        <style>
            .lined {
                border: solid 2px black;
                border-collapse: collapse;

                font-family: Verdana;
                font-size: 12px;
            }
            .lined th,
            .lined td {
                border: solid 1px black;
                padding: 3px;
            }
            h4 {
                font-weight:bold;
            }
        </style>
    </head>
    '''
    html = re.sub('</head>', style, html)

    return html


def get_proms_html_footer():
    html = requests.get('http://scikey.org/theme/template-footer.inc').text
    html = html.replace('This web page is maintained', 'This system\'s web page is maintained')

    return html


def submit_stardog_query(query):
    url = settings.PROMS_DB_URI
    qsa = {'query': query}
    h = {'accept': 'application/sparql-results+json'}
    r = requests.get(url, params=qsa, headers=h, auth=('proms', 'proms'))

    if r.status_code == 200:
        return [True, r.text]
    else:
        return [False, 'ERROR: ' + r.text]


#
#   Reports
#
def get_reports():
    query = '''
                PREFIX dc: <http://purl.org/dc/elements/1.1/>
                SELECT DISTINCT ?s ?t
                WHERE {
                  { ?s a proms:BasicReport . }
                  UNION
                  { ?s a proms:ExternalReport . }
                  UNION
                  { ?s a proms:InternalReport . }
                  ?s dc:title ?t .
                }
                ORDER BY ?s
            '''
    return submit_stardog_query(query)


def get_report(report_uri):
    #TODO: landing page
    #get the report metadata from DB
    query = '''
        PREFIX proms: <http://promsns.org/ns/proms#>
        PREFIX prov: <http://www.w3.org/ns/prov#>
        PREFIX dc: <http://purl.org/dc/elements/1.1/>
        SELECT ?t ?job ?rt
        WHERE {
          <''' + report_uri + '''> dc:title ?t .
          <''' + report_uri + '''> proms:jobId ?job .
          <''' + report_uri + '''> a ?rt .
        }
        ORDER BY ?s
    '''
    return submit_stardog_query(query)


def get_reports_html(sparql_query_results_json):
    import urllib

    reports = json.loads(sparql_query_results_json)
    l = '<ul>'
    for report in reports['results']['bindings']:
        url_encoded = urllib.quote(str(report['s']['value']))
        l += '<li><a href="/id/report?uri=' + url_encoded + '">' + str(report['t']['value']) + '</a> (' + str(report['s']['value']) + ')</li>'
    l += '</ul>'

    return l


def get_report_html(report_uri):
    results = get_report(report_uri)
    if results[0]:
        r = json.loads(results[1])
        #determine display based on reportType
        rt = r['results']['bindings'][0]['rt']['value']
        html = ''
        if rt == 'http://promsns.org/ns/proms#InternalReport':
            pass
        elif rt == 'http://promsns.org/ns/proms#ExternalReport':
           html = '<h4><a href="http://promsns.org/ns/proms#ExternalReport"><em>External</em></a> Report</h4>'
        else:
            #Basic
            #just display a table of the metadata
            html = '<h4><a href="http://promsns.org/ns/proms#BasicReport"><em>Basic</em></a> Report</h4>'
            html += '<table class="lines">'
            #html += '  <tr><th colspan="2"><a href="' + report_uri + '">' + report_uri + '</a></th></tr>'
            html += '  <tr><th>Title:</th><td>' + r['results']['bindings'][0]['t']['value'] + '</td></tr>'
            html += '  <tr><th>JobId:</th><td>' + r['results']['bindings'][0]['job']['value'] + '</td></tr>'
            html += '</table>'

    return html


def put_report(report_in_turtle):
    #replace the document's placeholder URI with one generated by this PROMS instance
    import uuid
    doc_uri = settings.PROMS_INSTANCE_NAMESPACE_URI + str(uuid.uuid4()) + '#'
    report_in_turtle = report_in_turtle.replace('http://placeholder.org#', doc_uri)
    #try to make a graph of the input text
    g = Graph()
    try:
        g.parse(cStringIO.StringIO(report_in_turtle), format="n3")
    except Exception as e:
        return [False, ['Could not parse input: ' + str(e)]]

    #conformance
    conf_results = proms.Proms(g).get_result()
    if conf_results['rule_results'][0]['passed']:
        #passed conformance so sent to DB
        #put data into a SPARQL 1.1 INSERT DATA query
        insert_query = 'INSERT DATA {' + g.serialize(format='n3') + '}'

        #insert into Stardog using the HTTP API
        url = 'http://localhost:5820/proms/update'
        h = {'content-type': 'application/sparql-update'}
        r = requests.post(url, data=insert_query, headers=h, auth=('proms', 'proms'))

        if r.status_code == 200:
            return [True]
        else:
            return [False, r.text]
    else:
        return [False, conf_results['rule_results'][0]['fail_reasons']]


#
#   Entities
#
def get_entities():
    query = '''
                PREFIX dc: <http://purl.org/dc/elements/1.1/>
                SELECT DISTINCT ?s ?t
                WHERE {
                  { ?s a prov:Entity . }
                  UNION
                  { ?s a prov:Plan . }
                  OPTIONAL { ?s dc:title ?t . }
                }
                ORDER BY ?s
            '''
    return submit_stardog_query(query)


def get_entity(entity_uri):
    #TODO: landing page with view options:
    #   wasDerivedFrom, wasGeneratedBy, inv. used, hadPrimarySource, wasAttributedTo, value
    #get the report metadata from DB
    query = '''
        PREFIX proms: <http://promsns.org/ns/proms#>
        PREFIX prov: <http://www.w3.org/ns/prov#>
        PREFIX dc: <http://purl.org/dc/elements/1.1/>
        SELECT ?t
        WHERE {
          OPTIONAL { <''' + entity_uri + '''> dc:title ?t . }
        }
        ORDER BY ?s
    '''
    return submit_stardog_query(query)


def get_entities_html(sparql_query_results_json):
    import urllib

    reports = json.loads(sparql_query_results_json)
    l = '<ul>'
    for report in reports['results']['bindings']:
        if report.get('t'):
            url_encoded = urllib.quote(str(report['s']['value']))
            l += '<li><a href="/id/entity?uri=' + url_encoded + '">' + str(report['t']['value']) + '</a> (' + str(report['s']['value']) + ')</li>'
        else:
            l += '<li><a href="/id/entity?uri=' + str(report['s']['value']) + '">' + str(report['s']['value']) + '</a></li>'
    l += '</ul>'

    return l


def get_entity_html(entity_uri):
    get_entity_result = get_entity(entity_uri)
    #check for any faults
    if get_entity_result[0]:
        entity_details = json.loads(get_entity_result[1])
        #check we got a result
        if len(entity_details['results']['bindings']) > 0:
            script = '''
                    var svgContainer = d3.select("#container-content-2").append("svg")
                                                        .attr("width", 700)
                                                        .attr("height", 500);

                    //Entity
                    var entity = svgContainer.append("ellipse")
                                            .attr("cx", 350)
                                            .attr("cy", 250)
                                            .attr("rx", 100)
                                            .attr("ry", 65)
                                            .attr("fill", "#ffffbe")
                                            .attr("stroke", "grey")
                                            .attr("stroke-width", "1");

                    //Entity class name
                    var entityName = svgContainer.append("text")
                                            .attr("x", 350)
                                            .attr("y", 230)
                                            .text("Entity")
                                            .style("font-family", "Verdana")
                                            .style("text-anchor", "middle");
            '''
            #print its title, if it has one
            if entity_details['results']['bindings'][0].get('t'):
                script += '''
                    //Entity title
                    var entityTitle = svgContainer.append("text")
                                            .attr("x", 350)
                                            .attr("y", 255)
                                            .text("Title")
                                            .style("font-family", "Verdana")
                                            .style("font-weight", "bold")
                                            .style("text-anchor", "middle");
                '''
            if True:
                script += '''
                    //Activity (used)
                    var activityUsed = svgContainer.append("rect")
                                            .attr("x", 550)
                                            .attr("y", 200)
                                            .attr("width", 149)
                                            .attr("height", 100)
                                            .attr("fill", "#cfceff")
                                            .attr("stroke", "blue")
                                            .attr("stroke-width", "1");

                    //Activity class name
                    var activityUsedName = svgContainer.append("text")
                                            .attr("x", 625)
                                            .attr("y", 230)
                                            .text("Activity")
                                            .style("font-family", "Verdana")
                                            .style("text-anchor", "middle");

                    //Activity (used) arrow
                    var activityUsedArrow = svgContainer.append("polygon")
                                            .style("stroke-width", "1")
                                            .attr("points", "550,249, 460,249, 460,244, 450,250, 460,257, 460,251, 550,251");

                    //Activity (used) arrow name
                    var activityUsedArrowName = svgContainer.append("text")
                                            .attr("x", 500)
                                            .attr("y", 240)
                                            .text("prov:used")
                                            .style("font-family", "Verdana")
                                            .style("font-size", "smaller")
                                            .style("text-anchor", "middle");
                '''

            if True:
                script += '''
                    //Activity (wasGeneratedBy)
                    var activityWGB = svgContainer.append("rect")
                                            .attr("x", 1)
                                            .attr("y", 200)
                                            .attr("width", 150)
                                            .attr("height", 100)
                                            .attr("fill", "#cfceff")
                                            .attr("stroke", "blue")
                                            .attr("stroke-width", "1");

                    //Activity class name
                    var activityWGBName = svgContainer.append("text")
                                            .attr("x", 75)
                                            .attr("y", 230)
                                            .text("Activity")
                                            .style("font-family", "Verdana")
                                            .style("text-anchor", "middle");

                    //Activity (wasGeneratedBy) arrow
                    var activityWGBArrow = svgContainer.append("polygon")
                                            .style("stroke-width", "1")
                                            .attr("points", "250,249, 160,249, 160,244, 150,250, 160,257, 160,251, 250,251");

                    //Activity (wasGeneratedBy) arrow name
                    var activityUsedArrowName = svgContainer.append("text")
                                            .attr("x", 200)
                                            .attr("y", 195)
                                            .text("prov:wasGeneratedBy")
                                            .style("font-family", "Verdana")
                                            .style("font-size", "smaller")
                                            .style("text-anchor", "middle");
                '''

            if True:
                script += '''
                    //Entity (wasDerivedFrom)
                    var entityWDF = svgContainer.append("ellipse")
                                            .attr("cx", 350)
                                            .attr("cy", 435)
                                            .attr("rx", 100)
                                            .attr("ry", 64)
                                            .attr("fill", "#ffffbe")
                                            .attr("stroke", "grey")
                                            .attr("stroke-width", "1");

                    //Entity class name
                    var entityWDFName = svgContainer.append("text")
                                            .attr("x", 350)
                                            .attr("y", 420)
                                            .text("Entity")
                                            .style("font-family", "Verdana")
                                            .style("text-anchor", "middle");

                    //Entity (wasDerivedFrom) arrow
                    var entityWDFArrow = svgContainer.append("polygon")
                                            .style("stroke-width", "1")
                                            .attr("points", "349,315, 349,360, 344,360, 350,370, 356,360, 351,360, 351,315");

                    //Entity (wasDerivedFrom) arrow name
                    var entityWDFArrowName = svgContainer.append("text")
                                            .attr("x", 350)
                                            .attr("y", 350)
                                            .text("prov:wasDerivedFrom")
                                            .style("font-family", "Verdana")
                                            .style("font-size", "smaller")
                                            .style("text-anchor", "middle");
                '''

            if True:
                script += '''
                    //Agent (wasAttributedTo)
                    var agent = svgContainer.append("polygon")
                                            .style("stroke", "black")
                                            .style("fill", "moccasin")
                                            .style("stroke-width", "1")
                                            .attr("points", "350,1, 400,25, 400,100, 300,100, 300,25");

                    //Agent class name
                    var agentName = svgContainer.append("text")
                                            .attr("x", 350)
                                            .attr("y", 40)
                                            .text("Agent")
                                            .style("font-family", "Verdana")
                                            .style("text-anchor", "middle");

                    //Agent (wasAttributedTo) arrow
                    var agentArrow = svgContainer.append("polygon")
                                            .style("stroke-width", "1")
                                            .attr("points", "349,185, 349,110, 344,110, 350,100, 356,110, 351,110, 351,185");

                    //Agent (wasAttributedTo) arrow name
                    var agentArrowName = svgContainer.append("text")
                                            .attr("x", 350)
                                            .attr("y", 150)
                                            .text("prov:wasAttributedTo")
                                            .style("font-family", "Verdana")
                                            .style("font-size", "smaller")
                                            .style("text-anchor", "middle");
                '''

            if True:
                script += '''
                    //value
                    var value = svgContainer.append("rect")
                                            .attr("x", 1)
                                            .attr("y", 400)
                                            .attr("width", 150)
                                            .attr("height", 99)
                                            .attr("fill", "none")
                                            .attr("stroke", "grey")
                                            .attr("stroke-width", "1");

                    //value property name
                    var valueName = svgContainer.append("text")
                                            .attr("x", 75)
                                            .attr("y", 430)
                                            .text("value")
                                            .style("font-family", "Verdana")
                                            .style("text-anchor", "middle");


                    //value property arrow
                    var valueArrow = svgContainer.append("polygon")
                                            .style("stroke-width", "1")
                                            .style("stroke", "grey")
                                            .attr("fill", "grey")
                                            .attr("points", "148,400 265,285, 263,288, 150,400, 155,400, 150,392");

                    //value property arrow name
                    var agentArrowName = svgContainer.append("text")
                                            .attr("x", 150)
                                            .attr("y", 350)
                                            .text("prov:value")
                                            .style("font-family", "Verdana")
                                            .style("font-size", "smaller")
                                            .style("text-anchor", "middle");
                '''

            html = '''
                <h4>Neighbors view</h4>
                <script src="/static/js/d3.min.js" charset="utf-8"></script>
                <style>
                    svg {
                        /*border: solid 1px #eeeeee;*/
                        margin-left:75px;
                    }
                </style>
                <script>
                    ''' + script + '''
                </script>
            '''
        else:
            html = '''
                <h4>Entity not found</h4>
            '''
    else:
        html = '''
            <h4>There was a fault</h4>
        '''

    return html


#
#   Activities
#
def get_activities():
    query = '''
                PREFIX dc: <http://purl.org/dc/elements/1.1/>
                SELECT DISTINCT ?s ?t
                WHERE {
                  ?s a prov:Activity .
                  ?s dc:title ?t .
                }
                ORDER BY ?s
            '''
    return submit_stardog_query(query)


def get_activities_html(sparql_query_results_json):
    reports = json.loads(sparql_query_results_json)
    l = '<ul>'
    for report in reports['results']['bindings']:
        l += '<li><a href="' + str(report['s']['value']) + '">' + str(report['t']['value']) + '</a> (' + str(report['s']['value']) + ')</li>'
    l += '</ul>'

    return l