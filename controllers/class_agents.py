import cStringIO
import uuid
from rdflib import Graph
import api_functions
import settings
from database import sparqlqueries
from modules.ldapi import LDAPI


class IncomingAgent:
    def __init__(self, agent_data, agent_mimetype):
        self.agent_data = agent_data
        self.agent_mimetype = agent_mimetype
        self.agent_graph = None
        self.error_messages = None
        self.agent_uri = None

    def valid(self):
        """Validates an incoming Agent using direct tests (can it be parsed?) and appropriate RuleSets"""
        # try to parse the Agent data
        try:
            self.agent_graph = Graph().parse(
                cStringIO.StringIO(self.agent_data),
                format=[item[1] for item in LDAPI.MIMETYPES_PARSERS if item[0] == self.agent_mimetype][0]
            )
        except Exception, e:
            self.error_messages = ['The serialised data cannot be parsed. Is it valid RDF?',
                                   'Parser says: ' + e.message]
            return False

        # simple validation here, no RuleSet for now
        # only check if we have a label, >= 3 characters
        q = '''
        PREFIX prov: <http://www.w3.org/ns/prov#>
        ASK
        WHERE {
            ?ag a prov:Agent ;
                rdfs:label ?label .
            FILTER regex(?label, ".{3,}")
        }
        '''
        qres = bool(self.agent_graph.query(q))
        if not qres:
            self.error_messages = ['Agent does not contain an rdfs:label or the label is less than 3 characters long']
            return False

        # if the Report has been parsed, we have found the Report type and it's passed it's relevant RuleSet, it's valid
        return True

    def determine_agent_uri(self):
        """Determines the URI for this Agent"""
        # If this Agent has a placeholder URI, find it and replace it with one generated by PROMS Server
        q = '''
            PREFIX prov: <http://www.w3.org/ns/prov#>
            SELECT ?uri
            WHERE {
                ?uri a prov:Agent .
                FILTER regex(str(?uri), "placeholder")
            }
        '''
        uri = None
        for r in self.agent_graph.query(q):
            uri = r['uri']

        if uri is not None:
            self._generate_new_uri(uri)
        else:
            # since it has an existing URI, not a placeholder one, use the existing one
            q = '''
                PREFIX prov: <http://www.w3.org/ns/prov#>
                SELECT ?uri
                WHERE {
                    ?uri a prov:Agent .
                }
            '''
            for r in self.agent_graph.query(q):
                self.agent_uri = r['uri']

        return True

    def _generate_new_uri(self, old_uri):
        # ask PROMS Server for a new RS URI
        new_uri = settings.AGENT_BASE_URI + str(uuid.uuid4())
        self.agent_uri = new_uri
        # add that new URI to the in-memory graph
        api_functions.replace_uri(self.agent_graph, old_uri, new_uri)

    def stored(self):
        """ Add an Agent to PROMS"""
        try:
            sparqlqueries.insert(self.agent_graph, self.agent_uri)
            return True
        except Exception as e:
            self.error_messages = ['Could not connect to the provenance database']
            return False
